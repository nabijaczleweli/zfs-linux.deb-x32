From 77e671dfe9bf287fc4422318a05e8e817e4c3d5a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=BD=D0=B0=D0=B1?= <nabijaczleweli@gmail.com>
Date: Thu, 21 May 2020 17:04:44 +0200
Subject: dupa9: remove _LP64-on-_ILP32 trap (gcc-9 doesn't do it, have not
 managed to get my hands on clang-9 or -10); mention x32 as supported
 architecture; reerror _LP64+_ILP32 case

---
 lib/libspl/include/sys/isa_defs.h | 13 +++----------
 1 file changed, 3 insertions(+), 10 deletions(-)

diff --git a/lib/libspl/include/sys/isa_defs.h b/lib/libspl/include/sys/isa_defs.h
index acf90811..7bec3b93 100644
--- a/lib/libspl/include/sys/isa_defs.h
+++ b/lib/libspl/include/sys/isa_defs.h
@@ -46,15 +46,8 @@ extern "C" {
 #define	__x86
 #endif
 
-
 #if defined(_ILP32)
-/* x86_64 with 32-bit pointers: it's x32;
-   some code checks for _LP64 first, some for _ILP32; by undefining _LP64 we avoid problems caused by the former;
-   the downside of this approach is, of course, that all code that checks _LP64 first needs to include this header, though ideally all of them would */
-#if defined(_LP64)
-#warning beriddiing of_LP64
-#undef	_LP64
-#endif
+/* x32-specific defines; careful to *not* define _LP64 here */
 #else
 #if !defined(_LP64)
 #define	_LP64
@@ -206,13 +199,13 @@ extern "C" {
 #else
 /*
  * Currently supported:
- * x86_64, i386, arm, powerpc, s390, sparc, and mips
+ * x86_64, x32, i386, arm, powerpc, s390, sparc, and mips
  */
 #error "Unsupported ISA type"
 #endif
 
 #if defined(_ILP32) && defined(_LP64)
-#warning "Both _ILP32 and _LP64 are defined"
+#error "Both _ILP32 and _LP64 are defined"
 #endif
 
 #if !defined(_ILP32) && !defined(_LP64)
-- 
2.27.0.rc0

