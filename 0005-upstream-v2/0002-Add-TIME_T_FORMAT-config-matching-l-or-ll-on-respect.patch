From 46b400e3bdb8bad8cb1df2801f60bf95b94c07f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=BD=D0=B0=D0=B1?= <nabijaczleweli@gmail.com>
Date: Thu, 21 May 2020 21:53:13 +0200
Subject: [PATCH 2/2] Add TIME_T_FORMAT config, matching l or ll on respective
 platforms

Given the following test program:
  #include <time.h>
  #include <stdio.h>
  #include <stdint.h>
  int main() {
    printf("time_t:    %d\n", sizeof(time_t));
    printf("long:      %d\n", sizeof(long));
    printf("long long: %d\n", sizeof(long long));
  }

These are output on various architectures:
  x32$   time_t:    8
  x32$   long:      4
  x32$   long long: 8

  amd64$ time_t:    8
  amd64$ long:      8
  amd64$ long long: 8

  i386$  time_t:    4
  i386$  long:      4
  i386$  long long: 8

Therefore code using "%l[du]" to format time_ts produced warnings on x32
---
 config/always-time_t.m4      | 22 ++++++++++++++++++++++
 config/zfs-build.m4          |  1 +
 lib/libspl/timestamp.c       |  2 +-
 lib/libzfs/libzfs_sendrecv.c |  3 ++-
 4 files changed, 26 insertions(+), 2 deletions(-)
 create mode 100644 config/always-time_t.m4

diff --git a/config/always-time_t.m4 b/config/always-time_t.m4
new file mode 100644
index 000000000..68509540f
--- /dev/null
+++ b/config/always-time_t.m4
@@ -0,0 +1,22 @@
+dnl #
+dnl # Set TIME_T_FORMAT to the modifiers to %d or %u required to format a time_t.
+dnl #
+dnl # This means "l"  if sizeof(time_t) == sizeof(long),
+dnl #        and "ll" if sizeof(time_t) == sizeof(long long).
+dnl #
+dnl # In practice, these are the only viable types,
+dnl # so the second check can be omitted entirely.
+dnl #
+AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_TIME_T_FORMAT],
+[
+  AC_COMPILE_IFELSE(
+    [AC_LANG_SOURCE(
+      [[#include <time.h>
+        typedef char sizeof_time_t_eq_sizeof_long[(sizeof(time_t) == sizeof(long)) ? 1 : -1];
+      ]])],
+    [time_t_format="l"],
+    [time_t_format="ll"])
+
+  AC_DEFINE_UNQUOTED(ZFS_TIME_T_FORMAT, ["$time_t_format"],
+    [Argument to %d/%u to format a time_t -- "l" if sizeof(time_t) == sizeof(long) or "ll" otherwise])
+])
diff --git a/config/zfs-build.m4 b/config/zfs-build.m4
index 016c0fc09..0d4bf3b5b 100644
--- a/config/zfs-build.m4
+++ b/config/zfs-build.m4
@@ -164,6 +164,7 @@ AC_DEFUN([ZFS_AC_CONFIG_ALWAYS], [
 	ZFS_AC_CONFIG_ALWAYS_TOOLCHAIN_SIMD
 	ZFS_AC_CONFIG_ALWAYS_SYSTEM
 	ZFS_AC_CONFIG_ALWAYS_ARCH
+	ZFS_AC_CONFIG_ALWAYS_TIME_T_FORMAT
 	ZFS_AC_CONFIG_ALWAYS_PYTHON
 	ZFS_AC_CONFIG_ALWAYS_PYZFS
 	ZFS_AC_CONFIG_ALWAYS_SED
diff --git a/lib/libspl/timestamp.c b/lib/libspl/timestamp.c
index eab15f3f1..1b8e245c8 100644
--- a/lib/libspl/timestamp.c
+++ b/lib/libspl/timestamp.c
@@ -51,7 +51,7 @@ print_timestamp(uint_t timestamp_fmt)
 		fmt = nl_langinfo(_DATE_FMT);
 
 	if (timestamp_fmt == UDATE) {
-		(void) printf("%ld\n", t);
+		(void) printf("%" ZFS_TIME_T_FORMAT "d\n", t);
 	} else if (timestamp_fmt == DDATE) {
 		char dstr[64];
 		int len;
diff --git a/lib/libzfs/libzfs_sendrecv.c b/lib/libzfs/libzfs_sendrecv.c
index c65673dd3..43290f230 100644
--- a/lib/libzfs/libzfs_sendrecv.c
+++ b/lib/libzfs/libzfs_sendrecv.c
@@ -4888,7 +4888,8 @@ zfs_receive_one(libzfs_handle_t *hdl, int infd, const char *tosnap,
 		zfs_nicebytes(bytes, buf1, sizeof (buf1));
 		zfs_nicebytes(bytes/delta, buf2, sizeof (buf1));
 
-		(void) printf("received %s stream in %lu seconds (%s/sec)\n",
+		(void) printf("received %s stream "
+		    "in %" ZFS_TIME_T_FORMAT "u seconds (%s/sec)\n",
 		    buf1, delta, buf2);
 	}
 
-- 
2.27.0.rc0

